---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/CustomLayout.astro';
import TextToSpeech from '../../components/TextToSpeech';
import { Picture } from 'astro:assets';
import { format, parseISO } from 'date-fns';
import readingTime from 'reading-time';
import Panama from '/public/panflag.webp'


export async function getStaticPaths() {
    const blogsEntries = await getCollection('categorias');
    return blogsEntries.map((categorias) => ({
        params: { slug: categorias.slug },
        props: { categorias },
    }));
}

export const prerender = true;
const { categorias } = Astro.props;
const { Content } = await categorias.render();

const backgroundff = `background-image: url('${'/' + categorias.data.image}')`;

const cleanText = (text:string) => {
  // Remove Markdown headers (e.g., ##, ###)
  let cleanedText = text.replace(/(^|\s)#{1,6}\s.+$/gm, '');

  // Remove imports or other unwanted content
  cleanedText = cleanedText.replace(/import\s.+$/gm, '');

  // Remove code blocks
  cleanedText = cleanedText.replace(/```[\s\S]*?```/g, '');

  // Remove asterisks used for emphasis and bold
  cleanedText = cleanedText.replace(/\*\*|\*|__/g, '');

  // Optionally, remove other Markdown elements like links
  cleanedText = cleanedText.replace(/\[.*?\]\(.*?\)/g, ''); // Remove links

  // Optionally, remove HTML tags if present
  cleanedText = cleanedText.replace(/<\/?[^>]+(>|$)/g, ''); // Remove HTML tags

  return cleanedText;
}

const cleanedContent = cleanText(categorias.body.toString());

---

<MainLayout
    style={backgroundff}
    title={categorias.data.title}
    description={categorias.data.description}
    ogImage={Astro.site + 'images/hackthebox/' + categorias.data.image}
>

    <article
        class='flex dark:bg-gray-900 bg-slate-200 rounded shadow-2xl p-5 flex-col items-start justify-center w-full  max-w-2xl mx-auto mb-16'
    >
        <h1
            class='mb-4 text-3xl font-bold tracking-tight text-black md:text-5xl dark:text-white'
            transition:name='heading'
        >
            {categorias.data.title}
        </h1>
        <div
            class='flex flex-col items-start justify-between w-full mt-2 md:flex-row md:items-center'
        >
            <div class='flex items-center'>
                <Picture
                    src={Panama}
                    class='rounded-full h-6 w-6'
                    alt='Dedsec'
                    formats={['avif', 'webp']}
                />
                <p class='ml-2 text-sm text-gray-700 dark:text-gray-300'>
                    {'PanaPrende / '}
                    {
                        format(
                            parseISO(categorias.data.date.toISOString()),
                            'MMMM dd, yyyy'
                        )
                    }
                </p>
            </div>
            <p
                class='mt-2 text-sm text-gray-600 dark:text-gray-400 min-w-32 md:mt-0'
            >
                {readingTime(categorias.body).text}
                {` • --`}
            </p>
        </div>
        <TextToSpeech text={cleanedContent} client:load/>
        <div class='w-full mt-4 prose dark:prose-dark max-w-none break-words'>
            <h2>Descripción</h2>
            <p>{categorias.data.description}</p>
            <Content/>
        </div>
    </article>
</MainLayout>

